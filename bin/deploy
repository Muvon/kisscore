#!/usr/bin/env bash
[[ -z "$PROJECT" ]] && echo 'Not in project. Use "kiss PROJECT" first' && exit 1
if [[ -z "$1" ]]; then
  echo 'Usage: deploy [all|production|test|...]' && exit 1
fi
host_file=$CONFIG_DIR/hosts
if [[ ! -f $host_file ]]; then
  echo 'Create hosts file "'$host_file'" with hostnames to deploy on'
  exit 1
fi

if [[ "$1" == "all" ]]; then
  servers=$(cat $host_file)
else
  servers=$(cat $host_file | grep $1)
fi

if [[ -z $servers ]]; then
  echo 'There are no servers for deploy "'$1'" in hosts file'
  exit 1
fi

# Revision
commit=$(git log -n 1 | grep commit | cut -d' ' -f2 2>/dev/null)
revision=$(`which date` +%y%m%d%H%M)
if [[ ! -z $commit ]]; then
  revision=$revision.${commit:0:7}
fi

# Deploy on each server
for server in $servers; do
  echo $server
  (
  environment=${server#*:}
  if [[ "$environment" == "$server" || -z "$environment" ]]; then
    environment='production'
  fi
  server=${server%:*}

  echo 'Deploying on server '$server':'$environment
  scp $HOME/.kissrc $server:~
  ssh -T $server <<"EOF"
    /bin/cat ~/.bashrc | /bin/grep -v '#.kissrc$' > ~/.bashrc.tmp
    echo "source ~/.kissrc #.kissrc" >> ~/.bashrc.tmp
    /bin/mv ~/.bashrc.tmp ~/.bashrc
    source ~/.bashrc
EOF

  # Create dir if they do not exist
  ssh -T $server "mkdir -p ~/$PROJECT/rev/$revision && test -L ~/$PROJECT/app && cp -r \$_/* ~/$PROJECT/rev/$revision"

  # Create revision
  rsync -aiz --delete-before $APP_DIR/ $server:~/$PROJECT/rev/$revision/

  # Compile PROJECT on server
  ssh -T $server <<EOF
    test -L ~/$PROJECT/app && rm -f \$_
    ln -s ~/$PROJECT/rev/$revision ~/$PROJECT/app

    mkdir -p ~/$PROJECT/env/{etc,log,var,run,tmp,backup}

    test ! -L ~/$PROJECT/html && ln -s ~/$PROJECT/app/static \$_
    test ! -L ~/$PROJECT/env/bin && ln -s ~/$PROJECT/app/bin \$_

    kiss $PROJECT
    echo $environment > \$CONFIG_DIR/environment
    export PROJECT_ENV=$environment
    init
    [[ \$(/bin/ls \$TMP_DIR) ]] && /bin/rm \$TMP_DIR/*
    php-exec 'opcache_reset()' > /dev/null
EOF
  # All is done
  echo 'Deployed on server '$server
  ) > $TMP_DIR/deploy.$server 2>&1 &
done
wait $(jobs -rp) 2> /dev/null
echo

# Display result of jobs
for file in $(ls $TMP_DIR/deploy.*); do
  cat $file
  rm $file
done

echo 'Executing deploy-done script...'
test -x $BIN_DIR/deploy-done && $_
echo 'Executing deploy-done script done'
