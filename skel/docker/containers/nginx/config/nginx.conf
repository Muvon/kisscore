user root;
# если памяти много, можно это значение побольше, время отклика уменьшится
# рекомендуется ставить по числу ядре
worker_processes auto;
# Уменьшает число системных вызовов gettimeofday(), что приводит к увеличению производительности
timer_resolution 100ms;

# приоретет воркеров, сделал повыше
# чтобы из за медленных скриптов и корявых
# мускульных запросов статика отдавалась без лагов
worker_priority -5;
worker_rlimit_nofile 32768; #was 16k

#error_log   /var/log/nginx/error.log crit;
#error_log  /var/log/nginx/error.log  notice;
#error_log  /var/log/nginx/error.log  info;

error_log   /src/env/log/nginx-error.log warn;
pid         /src/env/run/nginx.pid;


events {
  worker_connections  8192; #was 4k
  use epoll;
  multi_accept on;
}


http {
  server_tokens off;

  #geoip_country  GeoIP.dat;
  #geoip_city     GeoLiteCity.dat;

  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;
  charset   utf-8;
  source_charset utf-8;
  charset_types text/xml text/plain text/css text/vnd.wap.wml application/javascript application/x-javascript application/rss+xml;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   '$upstream_response_time sec "$host"';
  access_log  /var/log/nginx/access.log  main;

  access_log off;

  aio on;
  sendfile off;
  send_timeout       30 ; # default 60


  keepalive_timeout 15 15;
  keepalive_requests 1024;

  # Эта опция позволяет включить прямое чтение без обращение в кеш операционной системы. Это полезно для больших файлов, поскольку операционный кеш для них малоэффективен. Опция позволяет задать минимальный размер для включения режима прямого чтения:
  directio                    256k; # was 8m

  # This directive permits or forbids the use of the socket options TCP_NOPUSH on FreeBSD or TCP_CORK on Linux. This option is only available when using sendfile. Setting this option causes nginx to attempt to send it's HTTP response headers in one packet on Linux and FreeBSD 4.x
  tcp_nopush                  off;

  tcp_nodelay                 on;
  reset_timedout_connection   on;

  client_header_timeout 15;
  client_body_timeout 15;

  client_header_buffer_size 4k; # default 1k
  large_client_header_buffers 8 4k; # default 4 4k/8k

  gzip on;
  gzip_min_length 1000;
  gzip_buffers 64 4k; # default 4 4k/8k
  gzip_comp_level 6;
  gzip_http_version 1.0;
  gzip_proxied any;
  gzip_types text/javascript application/javascript application/x-javascript text/css text/vnd.wap.wml application/xhtml+xml application/vnd.wap.xhtml+xml text/xml application/xml image/svg+xml text/plain application/json;
  gzip_vary on;
  gzip_static on;

  output_buffers 16 32k; # default 1 32k
  postpone_output 1460; # default 1460
  server_names_hash_bucket_size       512;

  chunked_transfer_encoding on; #This directive (0.7.66+) sets whether chunked encoding is enabled in responses (only valid for connections using HTTP 1.1 or later).

  # Поскольку мы имеем дело со статическими файлами, и есть вероятность того, что один и тот же пользователь сможет несколько раз запросить один и тот же файл, следует включить кеширование на браузере. Это достигается установкой опции “expires max”, которая отправит браузеру нужные заголовки:
  expires 7d;
  # Эта опция работает только в рамках одного запроса, а не клиента. Если Вы хотите поставить ограничение на клиента, следует использовать переменную:
  # limit_rate  196K;
  # В nginx также есть возможность установить порог отдачи, после которой ограничение войдет в силу. Также имеет смысл для потокового медиа (в этом случае первая указанная часть будет отдаваться без ограничений):
  # limit_rate_after 1m;

  resolver            127.0.0.1;
  resolver_timeout    10s;

  open_file_cache             max=100000 inactive=600s; #inactive was 40s
  open_file_cache_valid       3600s;# was 60s
  open_file_cache_min_uses    3;
  open_file_cache_errors      on;

  client_max_body_size 128m;
  client_body_buffer_size 64k; # default 8k/16k

  # fastcgi settings
  fastcgi_connect_timeout 15; # default 60
  fastcgi_send_timeout  15; # default 60
  fastcgi_read_timeout  15;
  fastcgi_buffer_size   4k; # default 4k/8k
  fastcgi_buffers   1024 4k; # default 8 4k/8k
  #fastcgi_busy_buffers_size  256k;
  #fastcgi_temp_file_write_size 0;
  # disable buffering to files
  fastcgi_max_temp_file_size  0;
  fastcgi_intercept_errors  on;

  # Load config files from the /etc/nginx/conf.d directory
  include /src/env/etc/nginx.conf;

  ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
  ssl_session_cache shared:SSL:20m;
  ssl_session_timeout 180m;
  ssl_prefer_server_ciphers on;
  ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;
}
