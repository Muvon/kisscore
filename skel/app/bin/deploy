#!/bin/bash
if [[ -z $1 ]]; then
  echo 'Usage: '$0' [all|production|test|...]' && exit 255
fi
user='web'
host_file=$CONFIG_DIR/hosts
if [[ ! -f $host_file ]]; then
  echo 'Create hosts "'$host_file'" file with hostnames to deploy on'
  exit 1
fi

if [[ "$1" == "all" ]]; then
  servers=$(cat $host_file)
else
  servers=$(cat $host_file | grep $1)
fi

if [[ -z $servers ]]; then
  echo 'There are no servers for deploy "'$1'" in hosts file'
  exit 1
fi

# Revision
commit=$(git log -n 1 | grep commit | cut -d' ' -f2 2>/dev/null)
revision=$(`which date` +%y%m%d%H%M)
if [[ ! -z $commit ]]; then
  revision=$revision.${commit:0:7}
fi

# Deploy on each server
for server in $servers; do
  (
  environment=${server#*:}
  if [[ "$environment" == "$server" || -z "$environment" ]]; then
    environment='production'
  fi
  server=${server%:*}

  echo 'Deploying on server '$server':'$environment
  scp $PROJECT_DIR/.kissrc $user@$server:/home/$user
  ssh -T $user@$server <<"EOF"
    /bin/cat $HOME/.bashrc | /bin/grep -v '#.kissrc$' > $HOME/.bashrc.tmp
    echo "source $HOME/.kissrc #.kissrc" >> $HOME/.bashrc.tmp
    /bin/mv $HOME/.bashrc.tmp $HOME/.bashrc
    source $HOME/.bashrc
EOF

  # Create dir if they do not exist
  ssh -T $user@$server "mkdir -p /home/$user/$PROJECT/rev/$revision && [[ -L /home/$user/$PROJECT/app ]] && cp -r /home/$user/$PROJECT/app/* /home/$user/$PROJECT/rev/$revision"

  # Create revision
  rsync -aiz --delete-before app/* $user@$server:/home/$user/$PROJECT/rev/$revision

  # Compile PROJECT on server
  ssh -T $user@$server <<EOF
    [[ -L /home/$user/$PROJECT/app ]] && rm -f /home/$user/$PROJECT/app
    ln -s /home/$user/$PROJECT/rev/$revision /home/$user/$PROJECT/app

    mkdir -p /home/$user/$PROJECT/env/{etc,log,var,run,tmp,backup}

    [[ ! -L /home/$user/$PROJECT/html ]] && ln -s /home/$user/$PROJECT/app/static /home/$user/$PROJECT/html
    [[ ! -L /home/$user/$PROJECT/env/bin ]] && ln -s /home/$user/$PROJECT/app/bin /home/$user/$PROJECT/env/bin

    kiss $PROJECT
    echo $environment > \$CONFIG_DIR/environment
    export PROJECT_ENV=$environment
    init
    [[ \$(/bin/ls \$TMP_DIR) ]] && /bin/rm \$TMP_DIR/*
    php-exec 'opcache_reset()' > /dev/null
EOF
  # All is done
  echo 'Deployed on server '$server
  ) > $TMP_DIR/deploy.$server 2>&1 &
done
wait

# Display result of jobs
for file in $(ls $TMP_DIR/deploy.*); do
  cat $file
  rm $file
done
