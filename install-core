#!/usr/bin/env bash
set -e

# Parse arguments
while [[ $# -gt 0 ]]; do
	case "$1" in
		--with-plugins)
			WITH_PLUGINS=true
			shift
			;;
		--*)
			KEY="${1#--}"
			KEY="${KEY^^}"
			VALUE="$2"
			declare -g "$KEY=$VALUE"
			shift 2
			;;
		*)
			PROJECT_PATH="$1"
			shift
			;;
	esac
done

# Check if project path is provided
[[ -z "$PROJECT_PATH" ]] && echo 'Enter path of project to create. Example: ./install-core ./app' && exit 255

# Check if project directory exists
[[ ! -e "$PROJECT_PATH" ]] && echo "Can't find project dir $PROJECT_PATH. Use ./create-app $PROJECT_PATH" && exit 255

kc_dir=$(cd "$(dirname "$0")" && pwd)
core_file=$PROJECT_PATH/app/core.php
# Currently we inject into global namespace
# but it's subject to thing to improve in the future
# cuz global is more easier to use and write code faster
cat << 'EOF' > "$core_file"
<?php declare(strict_types=1);
// Copyright (c) 2024 Muvon Un Limited <hello@muvon.io>. All rights reserved.
// namespace Core;
// use ArrayAccess;
// use Closure;
// use Error;
// use Exception;
// use InvalidArgumentException;
// use JsonSerializable;
// use Memcached;
// use RecursiveArrayIterator;
// use RecursiveIteratorIterator;
// use ReflectionClass;
// use SplStack;
// use Throwable;
// use mysqli;
// use mysqli_result;
// use mysqli_sql_exception;
EOF
echo -e '\e[1;35mInstall kiss core to '"$PROJECT_PATH"'\e[0m'
merge_files() {
	local directory="$1"
	local output_file="$2"

	for file in "$directory"/*; do
		if [ -d "$file" ]; then
			merge_files "$file" "$output_file"
		elif [ -f "$file" ]; then
			echo "Add file $file"
			tail -n +2 "$file" >> "$output_file"
			echo >> "$output_file"
		fi
	done
}

echo "Write into $core_file"
echo "Merging core"
merge_files "$kc_dir/app/core" "$core_file"
if [[ "$WITH_PLUGINS" == "true" ]]; then
	echo "Merging plugins"
	merge_files "$kc_dir/app/plugin" "$core_file"
fi
echo '...done'

